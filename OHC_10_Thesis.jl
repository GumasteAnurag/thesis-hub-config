using CSV
using DataFrames
using YAML
using JuMP
using HiGHS
using MathOptInterface
using Roots
using Plots
using Measures
using PrettyTables
using XLSX


# Step 1: Modularised Parameter Extraction from yaml data file
data = YAML.load_file("data_ohc_NPV.yaml")
function parameters(data)
    # Extract general parameters
    global nHours = data["nHours"]
    global Mfactor = data["Mfactor"]
    #global elec_prices = data["elec_prices"]
    #global h2_prices = electrolyser_params["h2_prices"]

    # Extract Wind parameters
    wind_params = data["Wind"]
    global P_rated = wind_params["P_rated"]
    global ind_WF_no = wind_params["ind_WF_no"]
    
    # Extract Converter parameters
    conv_params = data["Electrical"]
    global cvr_capacity = conv_params["cvr_capacity"]
    global esr_cvr_connect = conv_params["esr_cvr_connect"]
    
    # Extract Electrolyser parameters
    electrolyser_params = data["Electrolyser"]
    global esr_capacity = electrolyser_params["esr_capacity"]
    global esr_base = electrolyser_params["esr_base"]
    global esr_no = electrolyser_params["esr_no"]
    global esr_eff = electrolyser_params["esr_eff"]
   

    # Extract Investment parameters
    invest_params = data["Investment"]
    global Capex_wind = invest_params["Capex_wind"]
    global Opex_wind = invest_params["Opex_wind"]
    global Opex_var_wind = invest_params["Opex_var_wind"]
    global Capex_converter = invest_params["Capex_converter"]
    global Capex_cable = invest_params["Capex_cable"]
    global Capex_esr = invest_params["Capex_esr"]
    global Opex_esr = invest_params["Opex_esr"]
    global i = invest_params["i"]
    global u = invest_params["u"]
    global T = invest_params["T"]
end

# Call the function
parameters(data)

# Compute Discount Factor 
r = ((1+i)/(1+u)) - 1               # Real Rate of Interest
pvaf = (1/r)*(1 - ((1+r))^-T)       # Present Value of Annuity Factor

# Step 2: Load Input Data from CSV
wd = CSV.read("wtPower_meso_NL1264.csv", DataFrame)
power_out = wd[:, 1]./P_rated                                    # Extract the wind turbine output as an array

elec_file = "elec_prices_1995_2030.csv"
ep = CSV.read(elec_file, DataFrame)
elec_prices = ep[:, 1]./Mfactor                                  # Hourly electricity prices in mEUR/MWh

h2_file = "h2_prices_1995_2030.csv"
hp = CSV.read(h2_file, DataFrame)
h2_prices = hp[:, 1]./Mfactor                                    # Hourly hydrogen prices in mEUR/MWh


# Step 3: Define Optimisation Model
function define_optimization_model(power_out, elec_prices, h2_prices)
    # Initialise the optimisation model
    model = Model(HiGHS.Optimizer)
    set_optimizer_attribute(model, "output_flag", true)

    # Disable presolve
    # set_optimizer_attribute(model, "presolve", "off")
    
    ## 1. VARIABLES ##
    
    # Wind variables
    @variable(model, 0 <= wind_capacity)                   # Total wind farm capacity (MW)

    @variable(model, 0 <= WF_H2_cap)
    @variable(model, 0 <= WF_H2_E[1:nHours])
    @variable(model, 0 <= WF_H2_H2[1:nHours])
    @variable(model, 0 <= WF_H2_prod[1:nHours])
    @variable(model, 0 <= WF_H2_curtail[1:nHours]) 

    @variable(model, 0 <= WF_E_cap)
    @variable(model, 0 <= WF_E_E[1:nHours])
    @variable(model, 0 <= WF_E_H2[1:nHours])
    @variable(model, 0 <= WF_E_prod[1:nHours])
    @variable(model, 0 <= WF_E_curtail[1:nHours])
  
    # Energy Flow variables
    @variable(model, 0 <= energy_prod[1:nHours])           # Total wind energy produced (MWh)
    @variable(model, 0 <= elec_out[1:nHours])              # Hourly electricity production (MWh)
    @variable(model, 0 <= h2_in_wind[1:nHours])            # Hourly hydrogen from wind (MWh)
    @variable(model, 0 <= h2_in_onshore[1:nHours])         # Hourly H2 from onshore
    @variable(model, 0 <= h2_in[1:nHours])                 # Hourly H2 electricity input
    @variable(model, 0 <= h2_out[1:nHours])                # Hourly hydrogen production (MWh)
    @variable(model, 0 <= energy_prod_act[1:nHours])       # Total energy (electricity) generated by wind farms
    @variable(model, 0 <= wind_curtail[1:nHours])          # Wind Curtailment (MWh)

    # Cost-related variables
    @variable(model, 0 <= C_inv_wind)                           # Investment cost of wind farms
    @variable(model, 0 <= C_OM_wind)                            # Fixed O&M cost of wind farms    
    @variable(model, 0 <= C_OM_wind_var)                        # Variable O&M cost of wind farms 
    @variable(model, 0 <= C_wind)                               # Total Wind Farm Cost

    @variable(model, 0 <= C_inv_esr)                            # Investment cost of electrolysers
    @variable(model, 0 <= C_OM_esr)                             # Fixed O&M cost of electrolysers           
    @variable(model, 0 <= C_OM_esr_var)                         # Annual variable O&M cost of electrolysers
    @variable(model, 0 <= C_esr)                                # Total Electrolyser Cost

    @variable(model, 0 <= C_inv)                                # Total investment cost
    @variable(model, 0 <= C_OM)                                 # Total O&M cost
    @variable(model, 0 <= C_tot)                                # Total cost

    # Revenue-related variables
    @variable(model, 0 <= wind_rev[1:nHours])                   # Revenue of wind farms (from selling electricity)
    @variable(model, 0 <= wind_rev_act[1:nHours])               # Actual Revenue of wind farms
    @variable(model, 0 <= h2_rev[1:nHours])                     # Revenue from selling hydrogen
    @variable(model, 0 <= revenue[1:nHours])                    # Total hourly revenue
    @variable(model, 0 <= rev_yr)                               # Total Revenue per year
    @variable(model, 0 <= rev_tot)                              # Total Revenue in millions

    @variable(model, Profit)                                    # Total profit (M€)
    @variable(model, NPV)                                       # Net Present Value (M€)

    ## 2. CONSTRAINTS ##

    # Energy Constraints
    @constraint(model, energy_prod_act .== elec_out .+ h2_in_wind)           # Total energy balance constraint
    @constraint(model, wind_curtail .== WF_E_curtail .+ WF_H2_curtail)       # Wind curtailment

    # Capacity-related constraints  
    @constraint(model, elec_out .<= cvr_capacity)  
    
    # Hydrogen production and exclusivity constraints
    @constraint(model, h2_in_onshore .<= esr_cvr_connect)  
    @constraint(model, h2_in .== h2_in_wind .+ h2_in_onshore)  
    @constraint(model, h2_out .== h2_in .* esr_eff)  
    @constraint(model, h2_in .<= esr_capacity * esr_no)   

    ## Wind Farm Splitting Constraints ##

    @constraint(model, WF_E_H2 .<= esr_cvr_connect)
    @constraint(model, WF_E_prod .== WF_E_cap .* power_out)
    @constraint(model, WF_E_E .+ WF_E_H2 .+ WF_E_curtail .== WF_E_prod)

    @constraint(model, WF_H2_E .<= esr_cvr_connect)
    @constraint(model, WF_H2_prod .== WF_H2_cap .* power_out)
    @constraint(model, WF_H2_E .+ WF_H2_H2 .+ WF_H2_curtail .== WF_H2_prod)

    @constraint(model, WF_E_cap + WF_H2_cap == wind_capacity)
    @constraint(model, elec_out .== WF_E_E .+ WF_H2_E)
    @constraint(model, h2_in_wind .== WF_E_H2 .+ WF_H2_H2)
    @constraint(model, energy_prod .== WF_E_prod .+ WF_H2_prod)

    # Energy Balance Constraint - Internal Prices
    @constraint(model, energy_balance_constraint, energy_prod .+ h2_in_onshore .>= elec_out .+ h2_in)

    # Cost Constraints
    @constraint(model, C_inv_wind .== Capex_wind * wind_capacity)            
    @constraint(model, C_OM_wind .== Opex_wind * wind_capacity)              
    @constraint(model, C_OM_wind_var .== Opex_var_wind * sum(energy_prod_act)) 
    @constraint(model, C_wind .== C_inv_wind + (C_OM_wind + C_OM_wind_var) * T)

    @constraint(model, C_inv_esr .== Capex_esr * esr_no * esr_capacity)  
    @constraint(model, C_OM_esr .== Opex_esr * esr_no * esr_capacity)   
    @constraint(model, C_OM_esr_var .== sum(h2_in_onshore .* elec_prices))#
    @constraint(model, C_esr .== C_inv_esr + (C_OM_esr + C_OM_esr_var) * T)
    
    @expression(model, Opex_var_h2_act, h2_in .* elec_prices)#                               # Actual Variable O&M cost of electrolysers - Not pvaf constraint. Only used after optimisation. 
    @expression(model, C_OM_esr_var_act, sum(Opex_var_h2_act))                               # Actual Annual variable O&M cos of electrolysers
    @expression(model, C_esr_act, C_inv_esr + (C_OM_esr + C_OM_esr_var_act) * T)             # Actual Total Electrolyser Cost

    @constraint(model, C_inv .== C_inv_wind + C_inv_esr)                                     # Total investment cost
    @constraint(model, C_OM .== C_OM_wind + C_OM_wind_var + C_OM_esr + C_OM_esr_var)         # Total O&M cost
    @constraint(model, C_tot .== C_wind + C_esr)                                             # Total cost

    # Revenue Constraints
    @constraint(model, wind_rev .== elec_out .* elec_prices)#   
    @constraint(model, wind_rev_act .== energy_prod_act .* elec_prices)#  
    @constraint(model, h2_rev .== h2_out .* h2_prices)   
    @constraint(model, revenue .== wind_rev .+ h2_rev)
    @constraint(model, rev_yr .== sum(revenue))  
    @constraint(model, rev_tot .== rev_yr * T)  
    
    # Profit calculation
    @constraint(model, Profit .== rev_tot - C_tot)
    @constraint(model, NPV .== (rev_yr - C_OM) * pvaf - C_inv) 

    ## 4. OBJECTIVE FUNCTION ##
    @objective(model, Max, NPV)

    return model, C_inv_wind, C_OM_wind, C_OM_wind_var, C_inv_esr, C_OM_esr, C_OM_esr_var_act, energy_balance_constraint, energy_prod_act, elec_out, h2_in, h2_in_wind, h2_in_onshore, h2_out, wind_rev_act, h2_rev, C_wind, C_esr_act, C_OM_esr_var_act, C_inv_esr, C_tot, wind_capacity, WF_E_cap, WF_H2_cap, wind_curtail, Profit, NPV
end

model, C_inv_wind, C_OM_wind, C_OM_wind_var, C_inv_esr, C_OM_esr, C_OM_esr_var_act, energy_balance_constraint, energy_prod_act, elec_out, h2_in, h2_in_wind, h2_in_onshore, h2_out, wind_rev_act, h2_rev, C_wind, C_esr_act, C_OM_esr_var_act, C_inv_esr, C_tot, wind_capacity, WF_E_cap, WF_H2_cap, wind_curtail, Profit, NPV = define_optimization_model(power_out, elec_prices, h2_prices)

# Call the solver
optimize!(model)


# Step 4: Results and Plotting

status = termination_status(model)

if status == MOI.OPTIMAL
    
    println()
    println("\e[1mOptimisation was successful.\e[0m\n")

    # Construct scenario name (assumes format like "elec_prices_1995_2040.csv")
    
    elec_case = split(elec_file, "_")[end-1] * "_" * split(elec_file, "_")[end] |> x -> split(x, ".")[1]
    h2_case = split(h2_file, "_")[end-1] * "_" * split(h2_file, "_")[end] |> x -> split(x, ".")[1]
        
    if elec_case == h2_case
        scenario_name = "$elec_case"
        println("\e[1mScenario: $scenario_name\e[0m\n") 
    else
        println("\e[1mCases don't match.\e[0m\n")
    end

    # Access variables
    hours = 1:nHours
    WF_E_cap_val = value(WF_E_cap)
    WF_H2_cap_val = value(WF_H2_cap)
    optimal_capacity = value(wind_capacity)               
    optimal_profit = value(Profit)
    hub_NPV = value(NPV)
    C_wind_val = sum(value.(C_wind))
    
    wind_rev_yr = sum(value.(wind_rev_act))
    C_esr_val = sum(value.(C_esr_act))
    
    h2_rev_yr = sum(value.(h2_rev))
    C_inv_wind_val = value(C_inv_wind)
    C_OM_wind_val = value(C_OM_wind)
    C_OM_wind_var_val = value(C_OM_wind_var)
    C_inv_esr_val = value(C_inv_esr)
    C_OM_esr_val = value(C_OM_esr)
    C_OM_esr_var_act_val = value(C_OM_esr_var_act)

    elec_out_values = value.(elec_out)  # Extract electricity production values
    h2_in_values = [value(h2_in[t]) for t in hours]
    h2_wind_values = [value(h2_in_wind[t]) for t in hours]
    h2_onshore_values = [value(h2_in_onshore[t]) for t in hours]
    h2_prod_values = value.(h2_out)  # Extract H2 production values
    wind_curtail_values = value.(wind_curtail)

    ##  Calculating the Dual  ## 

    dual_values = ((dual.(energy_balance_constraint))/pvaf)
    
    #wind_rev_yr = sum(value.(elec_out.*dual_values))
    #C_esr_val = C_inv_esr_val + C_OM_esr_val + sum(value.(h2_in .* dual_values))

    ##    Profits    ##

    wind_rev_anl = wind_rev_yr * pvaf          # Annualised Wind Revenue
    h2_rev_anl = h2_rev_yr * pvaf              # Annualised Electrolyser Revenue
    p_wind = wind_rev_anl - C_wind_val
    p_esr = h2_rev_anl - C_esr_val

    ## Individual Party Profits ##

    # Capex 
    C_inv_wf_e = C_inv_wind_val * ((WF_E_cap_val / ind_WF_no) / optimal_capacity)
    C_inv_wf_h2 = (C_inv_wind_val * ((WF_H2_cap_val / esr_no) / optimal_capacity))
    C_inv_h2 = (C_inv_esr_val / esr_no)
    C_inv_comb = C_inv_wf_h2 + C_inv_h2
    C_inv_fin = ((C_inv_wind_val + C_inv_esr_val)/esr_no)

    wind_rev_yrs = value(sum((elec_out .+ h2_in_wind).*dual_values))
    C_OM_esr_var_act_vals = value(sum(h2_in.*dual_values))

    # Annual Profits
    p_wf_e = (wind_rev_yr - (C_OM_wind_var_val + C_OM_wind_val)) * ((WF_E_cap_val / ind_WF_no) / optimal_capacity)                                               
    p_wf_h2 = (wind_rev_yr - (C_OM_wind_var_val + C_OM_wind_val)) * ((WF_H2_cap_val / esr_no) / optimal_capacity) 
    p_h2 = ((h2_rev_yr - (C_OM_esr_var_act_val + C_OM_esr_val)) / esr_no)
    #p_h2 = ((h2_rev_yr - (sum(value.(h2_in .* dual_values)) + C_OM_esr_val)) / esr_no)
    p_fin = ((wind_rev_yr + h2_rev_yr - (C_OM_wind_var_val + C_OM_wind_val) - (C_OM_esr_var_act_val + C_OM_esr_val))/esr_no)

    # Net Present Value
    NPV_wf_e = p_wf_e * pvaf - C_inv_wf_e
    NPV_wf_h2 = p_wf_h2 * pvaf - C_inv_wf_h2
    NPV_h2 = p_h2 * pvaf - C_inv_h2
    NPV_comb = (p_wf_h2 + p_h2) * pvaf - (C_inv_wf_h2 + C_inv_h2)
    NPV_fin = p_fin * pvaf - C_inv_fin

    # Define the IRR equation
    irr_wf_e_equation(irr_wf_e) = (p_wf_e * (1 - (1 + irr_wf_e)^(-T)) / irr_wf_e) - C_inv_wf_e
    irr_wf_h2_equation(irr_wf_h2) = (p_wf_h2 * (1 - (1 + irr_wf_h2)^(-T)) / irr_wf_h2) - C_inv_wf_h2
    irr_h2_equation(irr_h2) = (p_h2 * (1 - (1 + irr_h2)^(-T)) / irr_h2) - C_inv_h2
    irr_comb_equation(irr_comb) = ((p_wf_h2 + p_h2) * (1 - (1 + irr_comb)^(-T)) / irr_comb) - (C_inv_wf_h2 + C_inv_h2)
    irr_fin_equation(irr_fin) = ((p_fin) * (1 - (1 + irr_fin)^(-T)) / irr_fin) - C_inv_fin

    # Solve for IRR using fzero
    initial_guess = 0.01

    function safe_fzero(f, guess)
        try
            return fzero(f, guess) * 100
        catch
            return 0.0   # or NaN or missing or "-"
        end
    end

    irr_wf_e  = safe_fzero(irr_wf_e_equation, initial_guess)
    irr_wf_h2 = safe_fzero(irr_wf_h2_equation, initial_guess)
    irr_h2    = safe_fzero(irr_h2_equation, initial_guess)
    irr_comb  = safe_fzero(irr_comb_equation, initial_guess)
    irr_fin   = safe_fzero(irr_fin_equation, initial_guess)

    ##   Infrastructure Utilisation   ##
    
    cable_util = ((sum(elec_out_values)+sum(h2_onshore_values))/(nHours*cvr_capacity))*100
    esr_util = ((sum(h2_prod_values))/(nHours*esr_no*esr_capacity*esr_eff))*100

    cable_util_1 = ((sum(elec_out_values))/(nHours*cvr_capacity))*100
    cable_util_2 = ((sum(h2_onshore_values))/(nHours*cvr_capacity))*100

    println(C_inv_fin)
    println(NPV_fin)
    println(irr_fin)

    # Define table data
    data = [
        "Electrical Wind Farm Capacity (MW)"                 string(WF_E_cap_val);
        #"" ""; 
        "Electrolyser Wind Farm Capacity (MW)"               string(WF_H2_cap_val);
        #"" ""; 
        "Total Hub Optimal Capacity (MW)"                    string(optimal_capacity); 
        #"" ""; 
        "Offshore Cable Utilisation (%)"                     string(cable_util); 
        #"" "";        
        "Offshore Cable Export (%)"                          string(cable_util_1); 
        #"" "";        
        "Offshore Cable Import (%)"                          string(cable_util_2); 
        #"" "";        
        "1 GW Wind Farm Capex (M€)"                          string(C_inv_wf_e); 
        #"" ""; 
        "1 GW Wind Farm NPV (M€)"                            string(NPV_wf_e); 
        #"" ""; 
        "1 GW Wind Farm IRR (%)"                             string(irr_wf_e); 
        #"" ""; 
        "500 MW H2 Wind Farm Capex (M€)"                     string(C_inv_wf_h2); 
        #"" ""; 
        "500 MW H2 Wind Farm NPV (M€)"                       string(NPV_wf_h2); 
        #"" ""; 
        "500 MW H2 Wind Farm IRR (%)"                        string(irr_wf_h2); 
        #"" ""; 
        "500 MW Electrolyser Capex (M€)"                     string(C_inv_h2); 
        #"" ""; 
        "500 MW Electrolyser NPV (M€)"                       string(NPV_h2); 
        #"" ""; 
        "500 MW Electrolyser IRR (%)"                        string(irr_h2); 
        #"" ""; 
        "500 MW Electrolyser + Wind Farm Capex (M€)"         string(C_inv_comb); 
        #"" ""; 
        "500 MW Electrolyser + Wind Farm NPV (M€)"           string(NPV_comb); 
        #"" ""; 
        "500 MW Electrolyser + Wind Farm IRR (%)"            string(irr_comb); 
        #"" ""; 
        "Electrolyser Utilisation (%)"                       string(esr_util); 
        #"" ""; 
        "Total Wind Farm Cost (M€)"                          string(C_wind_val); 
        #"" ""; 
        "Annual Electricity Trading Revenue (M€/year)"       string(wind_rev_yr); 
        #"" ""; 
        "Electricity Trading Profit (M€)"                    string(p_wind); 
        #"" ""; 
        "Total Electrolyser Cost (M€)"                       string(C_esr_val); 
        #"" ""; 
        "Annual Hydrogen Trading Revenue (M€/year)"          string(h2_rev_yr); 
        #"" ""; 
        "Hydrogen Trading Profit (M€)"                       string(p_esr); 
        #"" ""; 
        "Total Hub Net Present Value (M€)"                   string(hub_NPV);
        #"" "";
        "Total Hub Profit (M€)"                              string(optimal_profit);
        #"" "";
    ]


    # Now print the table with PrettyTables
    pretty_table(
        data,
        header=["Metric", "Value"],
        alignment=:l,                  # Align left for better readability
        tf=tf_unicode,                 # Unicode table for formatting
        columns_width=[55, 25],        # Widen columns for better spacing
        max_num_of_rows=typemax(Int),  # Display all rows
        limit_printing=false           # Completely disable row limiting# Prevent truncation
    )

    ## Plotting
    
    folder_path = "Plots_$scenario_name/"

    # Plot 1: Hydrogen and Electricity Prices
    plt1 = plot(
        hours, elec_prices.*Mfactor,
        label = "Electricity Prices (EUR/MWh)",
        color = :orange,
        linewidth = 1.5,
        size = (1920, 1080),  # High resolution (Full HD)
        xlabel = "Hour of the Year",
        ylabel = "Price (EUR/MWh)",
        title = "Energy Prices - $scenario_name",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size 
        margin = 10mm         # Adjust margins to provide space for the title
    )

    # Add Electricity Prices to the first plot
    plot!(
        plt1, hours, h2_prices.*Mfactor,
        label = "Hydrogen Prices (EUR/MWh)",
        color = :blue,
        linewidth = 1.5
    )#

    display(plt1)
    #savefig(plt1, joinpath(folder_path, "energy_prices_$scenario_name.png"))


    # Plot 1_1: Sorted Energy prices
    sorted_indices_elec = sortperm(elec_prices, rev=true)
    sorted_elec_prices = elec_prices[sorted_indices_elec]
    sorted_indices_h2 = sortperm(h2_prices, rev=true)
    sorted_h2_prices = h2_prices[sorted_indices_h2]

    plt1_1 = plot(
        hours, sorted_elec_prices.*Mfactor,
        label = "Electricity Prices (EUR/MWh)",
        color = :orange,
        linewidth = 1.5,
        size = (1920, 1080),  # High resolution (Full HD)
        xlabel = "Hour of the Year",
        ylabel = "Price (EUR/MWh)",
        title = "Energy Prices Sorted - $scenario_name",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size 
        margin = 10mm         # Adjust margins to provide space for the title
    )

    # Add Electricity Prices to the first plot
    plot!(
        plt1_1, hours, sorted_h2_prices.*Mfactor,
        label = "Hydrogen Prices (EUR/MWh)",
        color = :blue,
        linewidth = 1.5
    )#

    display(plt1_1)
    #savefig(plt1_1, joinpath(folder_path,"energy_prices_duration_curve_$scenario_name.png"))

    # Plot 2: Electricity Flows
    plt2 = plot(
        hours, h2_wind_values,
        label = "Wind --> Electrolyser (MWh)",
        color = :green,
        linewidth = 1.5,
        size = (1920, 1080),  # High resolution (Full HD)
        xlabel = "Hour of the Year",
        ylabel = "Electricity Production (MWh)",
        title = "Electricity Flows - $scenario_name",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size 
        margin = 10mm         # Adjust margins to provide space for the title
    )

    # Electricity flow from Wind farm to Shore 
    plot!(
        plt2, hours, elec_out_values,
        label = "Wind --> Shore (MWh)",
        color = :orange,
        linewidth = 1.5
    )

    # Electricity flow from Shore to Electrolyser
    plot!(
        hours, h2_onshore_values,
        label = "Shore --> Electrolyser (MWh)",
        color = :red,
        linewidth = 1.5,
        size = (1920, 1080),  # High resolution (Full HD)
    )

    display(plt2)
    #savefig(plt2, joinpath(folder_path, "electricity_flows_$scenario_name.png"))

    # Plot 2_1: Plot 2 zoomed
    plt2_1 = plt2  # Use the earlier plot
    xlims!(plt2_1, (1920, 2400))  # Set x-axis range
    xtick_values = collect(1920:24:2400)  # Generate values every 24 hours
    xticks!(plt2, xtick_values)  # Apply custom tick values

    display(plt2_1)
    #savefig(plt2_1, joinpath(folder_path, "Electricity_Flows_Zoomed_$scenario_name.png")) 

    # Plot 2_2: Sorted Electricity Flows

    sorted_indices_elec_out = sortperm(elec_out_values, rev=true)
    sorted_elec_out_values = elec_out_values[sorted_indices_elec_out]
    sorted_indices_h2_wind = sortperm(h2_wind_values, rev=true)
    sorted_h2_wind_values = h2_wind_values[sorted_indices_h2_wind]
    sorted_indices_onshore = sortperm(h2_onshore_values, rev=true)
    sorted_h2_onshore_values = h2_onshore_values[sorted_indices_onshore]
    
    plt2_2 = plot(
        hours, sorted_elec_out_values,
        label = "Wind --> Shore (MWh)",
        color = :orange,
        linewidth = 1.5,
        size = (1920, 1080),  # High resolution (Full HD)
        xlabel = "Hour of the Year",
        ylabel = "Electricity Production (MWh)",
        title = "Sorted Electricity Flows - $scenario_name",
        legendfontsize = 16,
        guidefontsize = 18,
        titlefontsize = 20,
        margin = 10mm
    )

    # Sorted Electricity flow from Wind farm to Shore 
    plot!(
        plt2_2, hours, sorted_h2_wind_values,
        label = "Wind --> Electrolyser (MWh)",
        color = :green,
        linewidth = 1.5
    )

    # Sorted Electricity flow from Shore to Electrolyser
    plot!(
        hours, sorted_h2_onshore_values,
        label = "Shore --> Electrolyser (MWh)",
        color = :red,
        linewidth = 1.5,
        size = (1920, 1080)
    )

    display(plt2_2)
    #savefig(plt2_2, joinpath(folder_path, "sorted_electricity_flows_$scenario_name.png"))


    # Plot 2_3: Cable Utilisation

    plt2_3 = plot(
        hours, sorted_elec_out_values,
        label = "Wind --> Shore (MWh)",
        color = :orange,
        linewidth = 1.5,
        fillalpha = 0.5,
        fill = :orange,
        fillrange = 0, 
        size = (1920, 1080),  # High resolution (Full HD)
        xlabel = "Hour of the Year",
        ylabel = "Electricity Production (MWh)",
        title = "Offshore Cable Utilisation - $scenario_name",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size 
        margin = 10mm         # Adjust margins to provide space for the title
    )  

    display(plt2_3)
    #savefig(plt2_3, joinpath(folder_path, "Cable_Util_$scenario_name.png"))

    # Plot 3: Hydrogen Production

    plt3 = plot(
        hours, h2_prod_values,
        label = "H2 Production (MWh)",
        color = :blue,
        linewidth = 2.5,
        size = (1920, 1080),  # High resolution (Full HD)
        xlabel = "Hour of the Year",
        ylabel = "Electrolyser Input/Output (MWh)",
        title = "Electrolyser Flows - $scenario_name",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size 
        margin = 10mm         # Adjust margins to provide space for the title
    )

    # Wind Component of Electrolyser Input
    plot!(
        hours, h2_wind_values,
        label = "Wind --> Electrolyser (MWh)",
        color = :green,
        linewidth = 1.5
    )

    # Onshore Component of Electrolyser Input
    plot!(
        hours, h2_onshore_values,
        label = "Shore --> Electrolyser (MWh)",
        color = :red,
        linewidth = 1.5,
        size = (1920, 1080),  # High resolution (Full HD)
    )

    display(plt3)
    #savefig(plt3, joinpath(folder_path, "electrolyser_flows_$scenario_name.png"))

    # Plot 3_1: Plot 3 zoomed
    plt3_1 = plt3  # Use the earlier plot
    xlims!(plt3_1, (1920, 2400))  # Set x-axis range
    xtick_values = collect(1920:24:2400)  # Generate values every 24 hours
    xticks!(plt3_1, xtick_values)  # Apply custom tick values

    display(plt3_1)
    #avefig(plt3_1, joinpath(folder_path, "electrolyser_flows_zoomed_$scenario_name.png"))

    # Plot 3_2: H2_prod Plot sorted 

    sorted_indices_H2_prod = sortperm(h2_prod_values, rev=true)
    sorted_h2_prod_values = h2_prod_values[sorted_indices_H2_prod]

    plt3_2 = plot(
        hours, sorted_h2_prod_values,
        label = "H2 Production (MWh)",
        color = :blue,
        linewidth = 2.5,
        size = (1920, 1080),  # High resolution (Full HD)
        xlabel = "Hour of the Year",
        ylabel = "Electrolyser Input/Output (MWh)",
        title = "Electrolyser Flows - $scenario_name",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size 
        margin = 10mm         # Adjust margins to provide space for the title
    )

    # Wind Component of Electrolyser Input
    plot!(
        plt3_2, hours, sorted_h2_wind_values,
        label = "Wind --> Electrolyser (MWh)",
        color = :green,
        linewidth = 1.5
    )

    # Onshore Component of Electrolyser Input
    plot!(
        plt3_2, hours, sorted_h2_onshore_values,
        label = "Shore --> Electrolyser (MWh)",
        color = :red,
        linewidth = 1.5,
        size = (1920, 1080),  # High resolution (Full HD)
    )

    display(plt3_2)
    #savefig(plt3_2, joinpath(folder_path, "sorted_electrolyser_flows_$scenario_name.png"))


    plt3_3 = plot(
        hours, sorted_h2_prod_values,
        label = "Electrolyser --> Shore (MWh)",
        color = :blue,
        linewidth = 1.5,
        fillalpha = 0.4,
        fill = :blue,
        fillrange = 0, 
        size = (1920, 1080),  # High resolution (Full HD)
        xlabel = "Hour of the Year",
        ylabel = "Hydrogen Production (MWh)",
        title = "Hydrogen Production - $scenario_name",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size 
        margin = 10mm         # Adjust margins to provide space for the title
    )  

    display(plt3_3)
    #savefig(plt3_3, joinpath(folder_path, "Electrolyser_Util_$scenario_name.png"))

    ## Plot 4: Duals or Internal Prices
    
    internal_prices = dual_values.*Mfactor

    # Convert to a DataFrame with one column
    ip = DataFrame(internal_prices = internal_prices)

    # Save to CSV
    CSV.write("internal_prices_$scenario_name.csv", ip)

    plt4 = plot(
        hours, dual_values.*Mfactor,
        label = "Internal vs Onshore Electricity Prices (€ per MWh)",  # Legend label
        color = :purple,  # Line color
        linewidth = 2,  # Line thickness
        size = (1920, 1080),  # High resolution (Full HD)
        xlabel = "Hour of the Year",
        ylabel = "Internal Price (€ per MWh)",
        title = "Internal vs Onshore Electricity Prices - $scenario_name",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size 
        margin = 10mm         # Adjust margins to provide space for the title
    )
    
    # Add Electricity Prices to the first plot
    plot!(
        plt4, hours, elec_prices.*Mfactor,
        label = "Onshore Electricity Prices (EUR/MWh)",
        color = :orange,
        linewidth = 1.5
    )
    # Display the plot
    display(plt4)
    #savefig(plt4, joinpath(folder_path, "Internal_Prices_$scenario_name.png"))

    # Plot 4_1: Internal Price Duration Curve

    sorted_indices_dual = sortperm(dual_values, rev=true)
    sorted_dual_values = dual_values[sorted_indices_dual]

    plt4_1 = plot(
        hours, sorted_dual_values.*Mfactor,
        label = "Internal Price Duration Curve (€ per MWh)",  # Legend label
        color = :purple,        # Line color
        linewidth = 2,          # Line thickness
        size = (1920, 1080),    # High resolution (Full HD)
        xlabel = "Hour of the Year",
        xticks = 0:1000:maximum(hours),
        ylabel = "Internal Price (€ per MWh)",
        title = "Internal Price Duration Curve - $scenario_name",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size 
        margin = 10mm         # Adjust margins to provide space for the title
    )
    # Add Electricity Prices to the first plot
    plot!(
        plt4_1, hours, sorted_elec_prices.*Mfactor,
        label = "Onshore Electricity Prices (EUR/MWh)",
        color = :orange,
        linewidth = 1.5
    )

    display(plt4_1)
    #savefig(plt4_1, joinpath(folder_path, "Internal_Price_Duration_Curve_$scenario_name.png"))

    # Plot 4_2: Plot 4 zoomed
    plt4_2 = plt4  # Use the earlier plot
    xlims!(plt4_2, (1920, 2400))  # Set x-axis range
    xtick_values = collect(1920:24:2400)  # Generate values every 24 hours
    xticks!(plt4_2, xtick_values)  # Apply custom tick values
    ylims!(plt4_2, (0, 200))  # Set y-axis range from 0 to 200
    ytick_values = collect(0:10:150)
    yticks!(plt4_2, ytick_values)
    
    plot!(
        plt4_2, hours, h2_prices.*Mfactor,
        label = "Hydrogen Prices (EUR/MWh)",
        color = :blue,
        linewidth = 1.5
    )

    display(plt4_2)
    #savefig(plt4_2, joinpath(folder_path, "Internal_Prices_zoomed_$scenario_name.png"))

    price_diff = elec_prices .- dual_values

    plt4_3 = plot(
        hours, price_diff .* Mfactor,
        label = "Onshore Price - Internal Price",
        color = :black,
        linewidth = 1.5,
        size = (1920, 1080),  # High resolution (Full HD)
        xlabel = "Hour of the Year",
        ylabel = "Price Difference",
        title = "Onshore Price - Internal Price - $scenario_name",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size  
        margin = 10mm         # Adjust margins to provide space for the title
    )

    display(plt4_3) #
    #savefig(plt4_3, joinpath(folder_path, "onshore-internal_$scenario_name.png"))

    sorted_indices_pdiff = sortperm(price_diff, rev=true)
    sorted_pdiff_values = price_diff[sorted_indices_pdiff]

    plt4_4 = plot(
        hours, sorted_pdiff_values .* Mfactor,
        label = "Price Difference Duration Curve",
        color = :black,
        linewidth = 1,
        size = (1920, 1080),  # High resolution (Full HD)
        xlabel = "Hour of the Year",
        ylabel = "Price Difference",
        title = "Onshore Price - Internal Price - $scenario_name",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size  
        margin = 10mm         # Adjust margins to provide space for the title
    )

    display(plt4_4) #
    #savefig(plt4_4, joinpath(folder_path, "onshore-internal_sorted_$scenario_name.png"))

    # Plot 5: Wind Curtailment
  
    plt5 = plot(
        hours, wind_curtail_values,
        label = "Wind Curtailment (MWh)",  # Legend label
        color = :magenta,        # Line color
        linewidth = 1,          # Line thickness
        size = (1920, 1080),    # High resolution (Full HD)
        xlabel = "Hour of the Year",
        xticks = 0:1000:maximum(hours),
        ylabel = "Wind Curtailment (MWh)",
        title = "Wind Curtailment - $scenario_name",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size 
        margin = 10mm         # Adjust margins to provide space for the title
    )

    display(plt5)
    #savefig(plt5, joinpath(folder_path, "Wind_Curtail_$scenario_name.png"))
    
    sorted_indices_curtail = sortperm(wind_curtail_values, rev=true)
    sorted_curtail_values = wind_curtail_values[sorted_indices_curtail]

    plt5_1 = plot(
        hours, sorted_curtail_values,
        label = "Wind Curtailment (MWh)",  # Legend label
        color = :magenta,        # Line color
        linewidth = 1.5,          # Line thickness
        fillalpha = 0.4,
        fill = :magenta,
        fillrange = 0, 
        size = (1920, 1080),    # High resolution (Full HD)
        xlabel = "Hour of the Year",
        xticks = 0:1000:maximum(hours),
        ylabel = "Wind Curtailment (MWh)",
        title = "Wind Curtailment - $scenario_name",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size 
        margin = 10mm         # Adjust margins to provide space for the title
    )
    
    display(plt5_1)
    #savefig(plt5_1, joinpath(folder_path, "Wind_Curtail_Duration_Curve_$scenario_name.png"))

    # Plot 6: Normalised Wind Output
   
    plt6 = plot(
        hours, power_out,
        label = "Normalised Wind Output (MWh/MW installed capacity)",  # Legend label
        color = :slategray,          # Line color
        linewidth = 1,          # Line thickness
        size = (1920, 1080),    # High resolution (Full HD)
        xlabel = "Hour of the Year",
        xticks = 0:1000:maximum(hours),
        ylabel = "Normalised Wind Output (MWh/MW installed capacity)",
        title = "Normalised Wind Output - NL1264",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size 
        margin = 10mm         # Adjust margins to provide space for the title
    )

    display(plt6)
    #savefig(plt6, joinpath(folder_path, "Normalised_Wind_Output_NL1264.png"))
    
    sorted_indices_wind = sortperm(power_out, rev=true)
    sorted_power_out = power_out[sorted_indices_wind]

    plt6_1 = plot(
        hours, sorted_power_out,
        label = "Sorted Normalised Wind Output (MWh)",  # Legend label
        color = :slategray,          # Line color
        linewidth = 1.5,          # Line thickness
        fillalpha = 0.4,
        fill = :slategray,
        fillrange = 0, 
        size = (1920, 1080),    # High resolution (Full HD)
        xlabel = "Hour of the Year",
        xticks = 0:1000:maximum(hours),
        ylabel = "Sorted Normalised Wind Output (MWh)",
        title = "Sorted Normalised Wind Output - NL1264",
        tickfontsize = 16,    # Axis tick number font size
        legendfontsize = 18,  # Legend text size 
        guidefontsize = 20,   # Axes label text size 
        titlefontsize = 22,   # Title text size 
        margin = 10mm         # Adjust margins to provide space for the title
    )

    display(plt6_1)
    #savefig(plt6_1, joinpath(folder_path, "Sorted_Normalised_Wind_Output_NL1264.png"))

    =#
elseif status == MOI.INFEASIBLE
    println("Model is infeasible. Investigating...")
    compute_iis(model)  # Compute irreducibly infeasible subsystem (IIS)
    
    # Print details of the infeasibility
    println("Infeasible constraints:")
    for con in all_constraints(model)
        conflict_status = MOI.get(model, MOI.ConstraintConflictStatus(), con)
        if conflict_status == MOI.CONFLICT_MEMBER
            println("Constraint is part of the conflict: ", con)
        end
    end
else
    println("Optimization did not converge to an optimal solution. Status: ", status)
end

#

